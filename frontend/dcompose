#!/bin/bash

# Config environment
# export COMPOSE_FILE=docker-compose.yml:docker-compose.prod.yml
# export COMPOSE_PROFILES=tooling
# export COMPOSE_ENV_FILES=.env.envfile1, .env.envfile2
export COMPOSE_ENV_FILES=../.env,../.env.dev.local
# COMPOSE_PROJECT_NAME=my_project

# Prints the help message
print_help() {
    cat <<-'EOF'
	Usage: ./dcompose [command]

	Commands:
	  run [create]         Create the project
	  up                   Start the development server
	  run [npm | npx]      Run npm | npx commands inside Docker
	  [COMPOSE_CMD]        Run any Docker Compose command

	Options:
	  --help | -h          Print this help message 
	EOF
}

# Helper function to find package-lock.json
#
# Returns 0 if a package-lock.json file is found in the current directory
# or one of its parents.
has_package_lock_json() {
    find ./ -maxdepth 3 -name "package-lock.json" | grep -q "package-lock.json"
}

# Target to create the project
#
# This command runs the create command inside the container to create the
# project if it doesn't exist.
create_project() {
    if ! has_package_lock_json; then
        docker compose run --rm create || {
            echo "Failed to create project. Exiting..."
            exit 1
        }
    fi
}

# Target to start the development server
#
# This command starts the development server by running the up command
# inside the container.
start_server() {
    # Trap SIGINT (Ctrl+C) and exit cleanly
    trap 'echo "Execution interrupted. Exiting..."; exit 1' SIGINT

    echo "Starting development server..."
    docker compose up "$@"
}

# Target to run NPM commands inside Docker
#
# This command runs the specified npm or npx command inside the container.
run_cli() {
    docker compose run --quiet-pull --rm cli "$@"
}

# This function dispatches the command to the appropriate handler.
main() {
    case "$1" in
    --help | -h)
        print_help
        ;;
    up)
        create_project
        shift
        start_server "$@"
        ;;
    run)

        shift
        case "$1" in
        create)
            create_project
            ;;
        npx | npm)
            run_cli "$@"
            ;;
        *)
            docker compose run "$@"
            ;;
        esac
        ;;
    *)
        docker compose "$@"
        ;;
    esac
}

main "$@"
